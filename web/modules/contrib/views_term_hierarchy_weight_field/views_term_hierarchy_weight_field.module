<?php

/**
 * @file
 * Main module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\Core\Language\LanguageInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function views_term_hierarchy_weight_field_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
  $vocabulary = \Drupal::routeMatch()->getParameter('taxonomy_vocabulary');

  $form['vid'] = [
    '#type' => 'value',
    '#value' => $vocabulary->id(),
  ];

  $form['actions']['submit']['#submit'] = [
    '::submitForm',
    'views_term_hierarchy_weight_field_form_taxonomy_form_submit',
  ];
  $form['actions']['reset_alphabetical']['#submit'][] = 'views_term_hierarchy_weight_field_form_taxonomy_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a submit handler to the term edit page
 * Used instead of hook_entity_update below, since we're updating multiple terms
 * in each pass.
 */
function views_term_hierarchy_weight_field_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'views_term_hierarchy_weight_field_form_taxonomy_form_submit';
  // Add handler to the button "Save and go to the list".
  if (isset($form['actions']['overview'])) {
    $form['actions']['overview']['#submit'][] = 'views_term_hierarchy_weight_field_form_taxonomy_form_submit';
  }
}

/**
 * Custom form submit callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function views_term_hierarchy_weight_field_form_taxonomy_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\taxonomy\TermStorage $taxonomy_storage */
  $taxonomy_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');

  views_term_hierarchy_weight_field_calculate_and_set_for_tree(
    $taxonomy_storage->loadTree($form['vid']['#value'])
  );
}

/**
 * Calculate and set term weight field for a vocabulary tree.
 * The calculation of actual weight can and should be much smarter.
 *
 * @param StdClass[] $tree
 *   The tree.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function views_term_hierarchy_weight_field_calculate_and_set_for_tree(array $tree) {
  // Add support for multilingual sites.
  $language_manager = \Drupal::languageManager();
  $langcodes_list = [LanguageInterface::LANGCODE_NOT_SPECIFIED];
  if ($language_manager->isMultilingual()) {
    $langcodes = $language_manager->getLanguages();
    $langcodes_list = array_keys($langcodes);
  }

  // Split terms array to process it in smaller batches.
  $batch_size = 25;
  $tree_chunks = array_chunk($tree, $batch_size, true);

  // Create operation array with the tree splitted.
  $operations = [];
  foreach ($tree_chunks as $tree_chunk) {
    $operations[] = [
      'views_term_hierarchy_weight_field_batch_save_fields',
      [
        $tree_chunk,
        $langcodes_list
      ]
    ];
  }

  // Define batch with the tree splitted.
  $batch = [
    'title' => t('Saving hierarchical weight and depth for the taxonomy'),
    'operations' => $operations
  ];
  batch_set($batch);
}


function views_term_hierarchy_weight_field_batch_save_fields(array $slice_tree, array $langcodes_list, &$context) {
  /** @var \Drupal\taxonomy\TermStorage $taxonomy_storage */
  $taxonomy_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');

  // Store weights with terms ids as keys.
  $terms_hierarchy_weights = [];
  // Store terms ids to load multiple terms at once.
  $terms_ids = [];
  foreach ($slice_tree as $hierarchical_weight => $tree_item) {
    $term_id = $tree_item->tid;
    $terms_ids[] = $term_id;
    $terms_hierarchy_weights[$term_id] = $hierarchical_weight;
  }

  // Load all the terms of the batch and process them.
  $terms = Term::loadMultiple($terms_ids);
  foreach ($terms as $tid => $term) {
    // Get hierarchy weight from previously created array using the term id.
    $hierarchical_weight = $terms_hierarchy_weights[$tid];
    // Get hierarchy depth.
    $hierarchical_depth = count($taxonomy_storage->loadAllParents($tid)) - 1;
    // For each active language save the term fields so the hierarchy is created on each language.
    foreach ($langcodes_list as $langcode) {
      if ($term->hasTranslation($langcode)) {
        $term = $term->getTranslation($langcode);
      }
      // Update term fields.
      views_term_hierarchy_weight_field_update($term, $hierarchical_weight, $hierarchical_depth);
    }
  }
}

/**
 * Custom function to update a term.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term.
 * @param int $hierarchical_weight
 *   Term's weight at current level.
 * @param int $hierarchical_depth
 *   Term's depth at current level.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function views_term_hierarchy_weight_field_update(TermInterface $term, $hierarchical_weight, $hierarchical_depth) {
  $term->set('field_tax_hierarchical_weight', $hierarchical_weight);
  $term->set('field_tax_hierarchical_depth', $hierarchical_depth);
  $term->save();
}


/**
 * Implements hook_entity_insert().
 */
function views_term_hierarchy_weight_field_entity_insert(EntityInterface $entity) {
  if (\Drupal::isConfigSyncing()) {
    return;
  }
  if ($entity->getEntityTypeId() === 'taxonomy_vocabulary') {
    \Drupal::service('views_term_hierarchy_weight_field.fields')->createFields($entity);
  }
}
